apply plugin: 'com.android.application'
//apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner rootProject.ext.android.testInstrumentationRunner
    }

    signingConfigs {
        debug {
//            storeFile file('studydagger2keystore.jks')
//            storePassword "123456"
//            keyAlias "studydagger2"
//            keyPassword "123456"
            keyAlias 'key0'
            keyPassword '123456'
            storeFile file('C:/Users/signed/talkcloud.jks')
            storePassword '123456'
        }
        release {
            storeFile file('studydagger2keystore.jks')
            storePassword "123456"
            keyAlias "studydagger2"
            keyPassword "123456"
        }
        buildTypes {
            debug {
                minifyEnabled false
//            zipAlignEnabled false
//            shrinkResources false
                //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.debug
            }

            release {
                //混淆
                minifyEnabled false
                // 移除无用的resource文件
            shrinkResources false
                //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                //签名
                signingConfig signingConfigs.release
            }

        }
        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    def fileName = outputFile.name.replace(".apk", "-${defaultConfig.versionName}-${buildTime()}.apk")
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }

    }
}
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.aliyun.ams:alicloud-android-hotfix:3.0.2'
    //    compile 'com.android.support:appcompat-v7:25.3.1'
    compile rootProject.ext.dependencies["appcompat"]
    compile rootProject.ext.dependencies["dagger"]
    annotationProcessor rootProject.ext.dependencies["dagger-compiler"]
    compile rootProject.ext.dependencies["butterknife"]
    annotationProcessor  rootProject.ext.dependencies["butterknife-compiler"]
    compile rootProject.ext.dependencies["glide"]
    compile rootProject.ext.dependencies["rxpermissions"]
    compile rootProject.ext.dependencies["rxjava"]
    compile rootProject.ext.dependencies["rxandroid"]
    compile rootProject.ext.dependencies["retrofit"]
    compile rootProject.ext.dependencies["retrofit-converter-gson"]
    compile rootProject.ext.dependencies["retrofit-adapter-rxjava2"]
    //    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
}

def buildTime() {
    return new Date().format("yyyy-MM-dd-HH-mm-ss", TimeZone.getTimeZone("UTC"))
}
